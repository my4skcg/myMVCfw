<?php
namespace Models;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-14 at 00:08:40.
 */
class userdoaTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var userdoa
	 */
	protected $object;
	protected $u = array();

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$GLOBALS['appLog'] = new \Lib\appLogger(SITEPATH . 'tests/logs', \Lib\appLogger::DEBUG);
		$this->object = new userdoa;
		$this->u['username'] = 'phpunit';
		$this->u['email'] = 'phpunit@test.com';
		$this->u['created'] = date("Y-m-d H:i:s");
		$this->u['active'] = false;
		$this->u['password'] = md5('phpunit');
		$this->u['activateKey'] = 0;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Models\userdoa::userExists
	 * @todo   Implement testUserExists().
	 */
	public function testUserExists() {
		$this->assertTrue($this->object->userExists('marion'));
		$this->assertFalse($this->object->userExists('dummy'));
	}

	/*
	 * @todo Create tests for error conditions
	 */
	/**
	 * @covers Models\userdoa::createNewUser
	 */
	public function testCreateNewUser() {
		$uid = $this->object->createNewUser($this->u);
		$this->assertGreaterThanOrEqual(1, $uid);
		$this->assertTrue($this->object->userExists($this->u['username']));
		return $uid;
	}

	/**
	 * @covers Models\userdoa::updateActive
	 * @depends testCreateNewUser
	 */
	public function testUpdateActive($uid) {
		$this->assertTrue($this->object->updateActive($uid));
	}

	/**
	 * @covers Models\userdoa::getUserData
	 * @depends testCreateNewUser
	 * 
	 */
	public function testGetUserData($uid) {
		$results = $this->object->getUserData($uid);
	  $this->assertInstanceOf('Models\user', $results);
		$this->assertEquals($uid, $results->getId());
		$this->assertEquals($this->u['username'], $results->getUsername());
		$this->assertEquals($this->u['email'], $results->getEmail());
	}

	/**
	 * @covers Models\userdoa::updateLastlogin
	 * @depends testCreateNewUser
	 */
	public function testUpdateLastlogin($uid) {
		$this->assertTrue($this->object->updateLastlogin($uid));
	}

	/**
	 * @covers Models\userdoa::deleteUser
	 * @depends testCreateNewUser
	 */
	public function testDeleteUser($uid) {
		$this->assertTrue($this->object->userExists($this->u['username']));
		$this->assertTrue($this->object->deleteUser($uid));
		$this->assertFalse($this->object->userExists($this->u['username']));
	}

	/**
	 * @covers Models\userdoa::getAllUsers
	 * @todo   Implement testGetAllUsers().
	public function testGetAllUsers() {
		// Remove the following lines when you implement this test.
		//$this->markTestIncomplete('This test has not been implemented yet.');
	}
	 */

}
