<?php
namespace App\Models;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-16 at 18:30:17.
 */
class contactdoaTest extends \PHPUnit_Framework_TestCase {

	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {

		$GLOBALS['appLog'] = new \Lib\appLogger(SITEPATH . 'tests/logs', \Lib\appLogger::DEBUG);
		$class = '\App\Models\contact';
		$table = 'contacts';
		$this->object = new contactdoa($class, $table);

		// setup the database with the test data
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers App\Models\contactdoa::contactExists
	 * @todo   Implement testContactExists().
	 */
	public function testContactExists() {
		$c =	array (
					'firstname' => 'Candy',
    			'lastname' => 'Bar',
					'userId' => '19' );
		$this->assertTrue($this->object->contactExists($c));
		$c =	array (
					'firstname' => 'Pop',
    			'lastname' => 'Cicle',
					'userId' => '19' );
		$this->assertFalse($this->object->contactExists($c));
		$c =	array (
					'firstname' => 'Candy',
    			'lastname' => 'Cicle',
					'userId' => '19' );
		$this->assertFalse($this->object->contactExists($c));
		$c =	array (
					'firstname' => 'Pop',
    			'lastname' => 'Bar',
					'userId' => '19' );
		$this->assertFalse($this->object->contactExists($c));
		$c =	array (
					'firstname' => 'Candy',
    			'lastname' => 'Bar',
					'userId' => '31' );
		$this->assertFalse($this->object->contactExists($c));
		$c =	array (
					'firstname' => 'Pop',
    			'lastname' => 'Cicle',
					'userId' => '31' );
		$this->assertFalse($this->object->contactExists($c));
	}

//	public function providerContactExists() {
//
//		return array (
//			array (
//				array (
//					'firstname' => 'Candy',
//    			'lastname' => 'Bar',
//					'userId' => '33' ))
//		);
//
//	}

	/**
	 * @covers App\Models\contactdoa::insertData
	 * @dataProvider providerInsertData
	 */
	public function testInsertData(array $c) {

		//echo '$c : ' . print_r($c,true) . PHP_EOL;
		$this->assertFalse($this->object->contactExists($c));
		$id = $this->object->insertData($c);
		$this->assertTrue($this->object->contactExists($c));
	}

	/*
	 * What other data to test with ?????
	 */
	public function providerInsertData() {


		$c = $this->getData();

		$i=0;
		return array(
				array($c[$i++]),
				array($c[$i++]),
				array($c[$i++]),
				array($c[$i++]));
	}

	/**
	 * @dataProvider providerGetAllContacts
	 */
	public function testGetAllContactsForUserId($uid) {

		$contacts = $this->object->getAllContactsForUserId($uid);
		$c = $this->getData();
		//echo PHP_EOL . '$contacts : ' . print_r($contacts,true) . PHP_EOL;
		//echo PHP_EOL . '$c : ' . print_r($c,true) . PHP_EOL;
		$this->assertEquals(count($c), count($contacts));

		//echo PHP_EOL . '$contacts[0] toArray : ' . print_r($contacts[0]->toArray(),true) . PHP_EOL;
		$resultArray = array_intersect_assoc($c[0], $contacts[0]->toArray());
		//echo PHP_EOL . '$resultArray : ' . print_r($resultArray,true) . PHP_EOL;
		$numContactElements = count($c[0]);
		$this->assertEquals($numContactElements, count($resultArray));

		foreach($contacts as $contact) {
			$this->object->deleteDataById($contact->getId());
		}
	}

	public function providerGetAllContacts() {
		$c = $this->getData();
		$userId = $c[0]['userId'];
		return array(
				array($userId)
			);
	}

	/**
	 * @covers App\Models\contactdoa::deleteDataById
	 *
	public function testDeleteDataById($id) {
		$this->object->deleteDataById($id);
		$data = $this->object->getData($id);
		$this->assertEquals(false, $data);
	}

	public function providerDeleteData() {
		$c = $this->getData();

	}
	 */

	public function getData() {

		$c = array (
			array ('firstname' => 'Milk',
				'lastname' => 'Chocolate',
				'phone1type' => '1',
				'phone1' => '777-888-9999',
				'phone2type' => '2',
				'phone2' => '444-555-6666',
				'phone3type' => '3',
				'phone3' =>'111-222-3333',
				'userId' => '33'
			),
			array ('firstname' => 'Dark',
				'lastname' => 'Chocolate',
				'phone1type' => '1',
				'phone1' => '777-888-9999',
				'phone2type' => '2',
				'phone2' => '444-555-6666',
				'phone3type' => '3',
				'phone3' =>'111-222-3333',
				'userId' => '33'
			),
			array ('firstname' => 'Swiss',
				'lastname' => 'Chocolate',
				'phone1type' => '1',
				'phone1' => '777-888-9999',
				'phone2type' => '2',
				'phone2' => '444-555-6666',
				'phone3type' => '3',
				'phone3' =>'111-222-3333',
				'userId' => '33'
			),
			array ('firstname' => 'German',
				'lastname' => 'Chocolate',
				'phone1type' => '1',
				'phone1' => '777-888-9999',
				'phone2type' => '2',
				'phone2' => '444-555-6666',
				'phone3type' => '3',
				'phone3' =>'111-222-3333',
				'userId' => '33'
			),
		);

		return $c;
	}

	/*
	 * This testInsertData has one dataset and passes $id to the testDelete function
	 * 
	public function testInsertData($c) {

		$c = array (
			'firstname' => 'Tootsie',
			'lastname' => 'Roll',
			'phone1type' => '1',
			'phone1' => '777-888-9999',
			'phone2type' => '2',
			'phone2' => '444-555-6666',
			'phone3type' => '3',
			'phone3' =>'111-222-3333',
			'userId' => '33'
		);

		$this->assertFalse($this->object->contactExists($c));
		$id = $this->object->insertData($c);
		$this->assertTrue($this->object->contactExists($c));
		return $id;
	}
	 */


}
